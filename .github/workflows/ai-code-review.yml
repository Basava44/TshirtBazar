stages:
  - ai_review

ai_code_review:
  stage: ai_review
  image: python:3.11
  script:
    # Install dependencies
    - pip install openai

    # Fetch target branch to compare diffs
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME

    # Get changes between MR source branch and target branch
    - git diff origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME...$CI_COMMIT_SHA > changes.diff

    # Save commit messages for review
    - git log origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME..$CI_COMMIT_SHA --pretty=format:"%h - %s" > commit_messages.txt

    # Run AI review
    - python - <<'EOF'
import os, openai, sys

openai.api_key = os.getenv("OPENAI_API_KEY")

# Read git diff
with open("changes.diff") as f:
    diff = f.read()

# Read commit messages
with open("commit_messages.txt") as f:
    commits = f.read()

if not diff.strip():
    print("No changes to review.")
    sys.exit(0)

# AI review prompt
criteria = """
Please review the following Git diff and commit messages. Provide structured feedback.

Focus on these areas:
1. **Code Quality**
   - Detect code duplication and suggest refactoring.
   - Identify deeply nested loops/conditionals and suggest simplification.
   - Highlight long functions/classes and recommend breaking down into smaller parts.
   - Check for consistent naming conventions (variables, functions, files).
   - Verify proper async call handling.
   - Validate type usage (e.g., TypeScript, Python type hints, Java types):
       * Are type annotations present where needed?
       * Are types/interfaces used consistently?
       * Are return/parameter types correct?
       * Are null/undefined/optional values handled safely?

2. **Testing**
   - Are there unit tests for new/changed code?
   - Are edge cases tested?

3. **Commit Hygiene**
   - Evaluate the commit messages: Are they clear, descriptive, and follow good practices?
   - Suggest improvements if messages are vague or unclear.

Return feedback grouped under these sections:
- Code Quality
- Type Checks
- Testing
- Commit Messages
"""

response = openai.ChatCompletion.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": "You are a strict senior engineer performing detailed code review."},
        {"role": "user", "content": f"{criteria}\n\n---\nGit Diff:\n{diff}\n\n---\nCommit Messages:\n{commits}"}
    ]
)

feedback = response.choices[0].message["content"]

# Save feedback to file
with open("ai_review_output.txt", "w") as out:
    out.write(feedback)

print("AI Review Completed.")
EOF

  after_script:
    # Post AI feedback as a comment on the MR
    - |
      if [ -s ai_review_output.txt ]; then
        curl --request POST \
          --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --header "Content-Type: application/json" \
          --data "{\"body\": \"ðŸ¤– AI Review Results:\n$(cat ai_review_output.txt)\"}" \
          "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes"
      else
        echo "No AI review output found."
      fi

  artifacts:
    paths:
      - ai_review_output.txt
      - commit_messages.txt
