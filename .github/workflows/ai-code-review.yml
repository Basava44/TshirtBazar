name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0   # ðŸ‘ˆ ensures full history so we can diff properly

      - name: Fetch main branch
        run: git fetch origin main

      - name: Get PR Diff
        id: get-diff
        run: |
          DIFF=$(git diff origin/main...HEAD)
          DIFF="${DIFF//'%'/'%25'}"
          DIFF="${DIFF//$'\n'/'%0A'}"
          DIFF="${DIFF//$'\r'/'%0D'}"
          echo "diff=$DIFF" >> $GITHUB_OUTPUT

      - name: Get Commit Messages
        id: get-commits
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const { data } = await github.request("GET /repos/{owner}/{repo}/pulls/{pull_number}/commits", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            return data.map(c => c.commit.message).join("\n\n---\n\n");
          result-encoding: string

      - name: AI Code Review
        id: ai-review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          DIFF="${{ steps.get-diff.outputs.diff }}"
          COMMITS="${{ steps.get-commits.outputs.result }}"

          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"gpt-4o-mini\",
              \"messages\": [
                {\"role\": \"system\", \"content\": \"You are a senior software engineer performing CI/CD code review.\"},
                {\"role\": \"user\", \"content\": \"Review the following code diff and commit messages. Provide feedback under three structured sections: 1. Code Quality (duplication, refactoring opportunities, nested loops/conditionals, long functions/classes, naming consistency, async handling). 2. Testing (unit test coverage, edge cases). 3. Commit Messages (clarity, best practices).\\n\\nCODE DIFF:\\n$DIFF\\n\\nCOMMIT MESSAGES:\\n$COMMITS\"}
              ]
            }" | jq -r '.choices[0].message.content')

          RESPONSE="${RESPONSE//'%'/'%25'}"
          RESPONSE="${RESPONSE//$'\n'/'%0A'}"
          RESPONSE="${RESPONSE//$'\r'/'%0D'}"
          echo "response=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Post AI Review as PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ðŸ¤– **AI Code Review Suggestions**
            ${{ steps.ai-review.outputs.response }}
