name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  ai-code-review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Get changed files
      id: changed-files
      run: |
        # Get the list of changed files in the PR
        git fetch origin ${{ github.base_ref }}
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
        echo "Changed files:"
        echo "$CHANGED_FILES"

        # Filter for code files (adjust extensions as needed)
        CODE_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(js|jsx|ts|tsx|py|java|cpp|c|h|cs|php|rb|go|rs|swift|kt)$' || true)

        if [ -z "$CODE_FILES" ]; then
          echo "No code files changed, skipping AI review"
          echo "has_code_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Code files to review:"
          echo "$CODE_FILES"
          echo "has_code_changes=true" >> $GITHUB_OUTPUT
          # Save file list for next step
          echo "$CODE_FILES" > changed_code_files.txt
        fi

    - name: Get file differences
      if: steps.changed-files.outputs.has_code_changes == 'true'
      id: get-diff
      run: |
        git fetch origin ${{ github.base_ref }}

        # Create a summary of all changes
        echo "# Code Changes Summary" > diff_summary.md
        echo "" >> diff_summary.md

        while IFS= read -r file; do
          if [ -n "$file" ]; then
            echo "## File: $file" >> diff_summary.md
            echo "" >> diff_summary.md
            echo "\`\`\`diff" >> diff_summary.md
            git diff origin/${{ github.base_ref }}...HEAD -- "$file" >> diff_summary.md
            echo "\`\`\`" >> diff_summary.md
            echo "" >> diff_summary.md
          fi
        done < changed_code_files.txt

    - name: AI Code Review with OpenAI
      if: steps.changed-files.outputs.has_code_changes == 'true'
      id: ai-review
      run: |
        # Install required dependencies
        npm install openai --force

        # Create the AI review script
        cat << 'EOF' > ai_reviewer.js
        const OpenAI = require('openai');
        const fs = require('fs');

        const openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });

        async function reviewCode() {
          try {
            const diffContent = fs.readFileSync('diff_summary.md', 'utf8');

            const prompt = `Please review this code diff and provide constructive feedback. Focus on:

        1. **Code Quality**: Logic errors, potential bugs, performance issues
        2. **Best Practices**: Coding standards, design patterns, maintainability
        3. **Security**: Potential vulnerabilities or security concerns
        4. **Testing**: Missing test cases or edge cases not covered
        5. **Documentation**: Missing or unclear documentation

        Please provide specific, actionable feedback. If the code looks good, say so briefly.
        Format your response in markdown with clear sections.

        Code Changes:
        ${diffContent}`;

            const response = await openai.chat.completions.create({
              model: 'gpt-4o-mini',
              messages: [
                {
                  role: 'system',
                  content: 'You are an expert code reviewer. Provide constructive, specific feedback on code changes. Be thorough but concise.'
                },
                {
                  role: 'user',
                  content: prompt
                }
              ],
              max_tokens: 2000,
              temperature: 0.3
            });

            const review = response.choices[0].message.content;
            fs.writeFileSync('ai_review.md', review);
            console.log('AI Review completed successfully');

          } catch (error) {
            console.error('Error during AI review:', error);
            fs.writeFileSync('ai_review.md', `## AI Review Error\n\nFailed to generate AI review: ${error.message}`);
            process.exit(1);
          }
        }

        reviewCode();
        EOF

        # Run the AI review
        node ai_reviewer.js
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Post AI Review as Comment
      if: steps.changed-files.outputs.has_code_changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            const aiReview = fs.readFileSync('ai_review.md', 'utf8');

            const comment = `## ðŸ¤– AI Code Review

            ${aiReview}

            ---

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

            console.log('AI review comment posted successfully');
          } catch (error) {
            console.error('Failed to post comment:', error);
            core.setFailed('Failed to post AI review comment');
          }

    - name: Create Check Run
      if: steps.changed-files.outputs.has_code_changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            const aiReview = fs.readFileSync('ai_review.md', 'utf8');

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'AI Code Review',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: 'neutral',
              output: {
                title: 'AI Code Review Completed',
                summary: 'AI has reviewed the code changes in this PR.',
                text: aiReview
              }
            });

            console.log('Check run created successfully');
          } catch (error) {
            console.error('Failed to create check run:', error);
          }

    - name: Skip Review Message
      if: steps.changed-files.outputs.has_code_changes == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '## ðŸ¤– AI Code Review\n\nNo code files were changed in this PR, skipping AI review.'
          });
